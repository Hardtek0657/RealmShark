plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

project.version = 'v0.9.14'
applicationName = 'Potato'

project.ext.lwjglVersion = "3.3.1"
project.ext.jomlVersion = "1.10.5"

switch (org.gradle.internal.os.OperatingSystem.current()) {
    case org.gradle.internal.os.OperatingSystem.MAC_OS:
        project.ext.lwjglNatives = "natives-macos"
        break
    case org.gradle.internal.os.OperatingSystem.WINDOWS:
        project.ext.lwjglNatives = "natives-windows"
        break
}

repositories {
    mavenCentral()
    maven { url = "https://s01.oss.sonatype.org/content/repositories/snapshots/" }
}

dependencies {
    implementation files("libs/RealmShark-v1.1.jar")
    implementation 'net.java.dev.jna:jna:5.12.1'
    implementation 'net.java.dev.jna:jna-platform:5.12.1'
    implementation 'org.java-websocket:Java-WebSocket:1.5.3'
    implementation 'lc.kra.system:system-hook:3.8'

    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")
    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-assimp"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-openal"
    implementation "org.lwjgl:lwjgl-opengl"
    implementation "org.lwjgl:lwjgl-stb"
    implementation 'org.slf4j:slf4j-nop:2.0.7'
    implementation 'games.spooky.gdx:gdx-gfx:1.0.0'
    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-assimp::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
    implementation 'org.joml:joml:1.10.5'

    implementation "io.github.chiraagchakravarthy:lwjgl-vectorized-text:0.0.7-SNAPSHOT"
//    implementation files("lib/LWJGL-vectorized-text.jar")
}

mainClassName = applicationName.toLowerCase() + '.' + applicationName


jar {
    manifest {
        attributes(
                'Main-Class': mainClassName
        )
    }
}

// Ugly solution to get version into source.
task generateSources {
    doFirst {
        def srcFile = new File(file("$buildDir/../src/main/java/" + applicationName.toLowerCase() + "/version"), "Version.java")
        srcFile.parentFile.mkdirs()
        srcFile.write("""package """ + applicationName.toLowerCase() + """.version;
/**
 * Don't edit this class. It's a gradle class to grab version from the build.gradle
 */
public class Version {
    public static final String VERSION = "$project.version";
}

""")
    }
}
compileJava.dependsOn generateSources
compileJava.source generateSources.outputs.files, sourceSets.main.java
compileJava.options.compilerArgs << '-Xlint:unchecked'


/**
 * add to vm optoins
 * "-XstartOnFirstThread"
 */
shadowJar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
    archiveFileName = "${applicationName}-${project.version}.jar"
}

apply plugin: 'com.github.johnrengelman.shadow'